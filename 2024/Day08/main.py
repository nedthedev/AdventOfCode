#!/usr/bin/python3

import itertools

DATA = """.............C.7..................G..0...y........
..................7................C..............
....................................0......W....y.
.......................................D..W.......
..........u.......................................
..................................4.......D0...j..
.....................................D............
................O.....C................G..........
............F.....................C...............
......u..........F.................4.......y......
..........X..........5....4...........1...........
..........F...........5X...................3......
.............F.............................j.3....
.................u..............X.................
............................7.....................
..................................................
..........................5.....j2.........4......
....d.....................y...................j1..
..................................................
............................Y.e...................
.................d...X...............J...........e
.............d....................................
..............................Y..............1....
.........................................Y........
......................W......8..f...J.........3...
.......w.............J............................
...................................U.....f......e.
.................................Of....e....t...1.
.......g..........d......s........................
................G................f................
.....................................O............
...g........................T.....U...............
......................s..........T.............G..
................................s.......8.........
.....9........g...........o...U............E......
............g............................t....o...
...........................................6....E.
.....................s......x........6....E.......
..........w.9................x............t.......
...........9........w...........J.....6o..........
.............................................o....
..........S................U......................
.......S..2..........c........T.O....t............
.....2...S.....c...................T..............
..................x.......................8.......
....9.............................................
...wS.....................................6.......
................2........................8........
..................................................
.................x....c........................E..""".split("\n")

# DATA = """............
# ........0...
# .....0......
# .......0....
# ....0.......
# ......A.....
# ............
# ............
# ........A...
# .........A..
# ............
# ............""".split("\n")

# DATA = """T.........
# ...T......
# .T........
# ..........
# ..........
# ..........
# ..........
# ..........
# ..........
# ..........""".split("\n")

class Map:
	def __init__(self, data):
		self.data = data
		self.map = []
		self.freqs = {}
		self.antinodes = 0
		self.gen_map(data)

	def gen_map(self, data):
		for r, line in enumerate(data):
			self.map.append([])
			for c, cell in enumerate(line):
				if(cell == '.'):
					self.map[r].append(Cell(None))
				else:
					if cell not in self.freqs:
						self.freqs[cell] = []
					self.map[r].append(Cell(cell))
					self.freqs[cell].append([r, c])

	def print(self):
		for row in self.map:
			r = ''
			for cell in row:
				if(cell.freq):
					r += cell.freq
				elif cell.is_an:
					r += '#'
				else:	
					r += '.'
			print(r)

	def prep_antinodes(self, recurse):
		dist = None
		factors = [1, -1]
		for freq in self.freqs:
			for i in range(len(self.freqs[freq])-1):
				for j in range(i+1, len(self.freqs[freq])):
					dist = [self.freqs[freq][i][0] - self.freqs[freq][j][0], self.freqs[freq][i][1] - self.freqs[freq][j][1]]
					for factor, cell in enumerate([i, j]):
						self.map_antinode([self.freqs[freq][cell][0], self.freqs[freq][cell][1]], dist, factors[factor], recurse)

	def map_antinode(self, coord, dist, factor, recurse):
		antinode = None
		newr = newc = 0
		try:
			newr = coord[0] + (dist[0]*(factor))
			newc = coord[1] + (dist[1]*(factor))
			if(newr >= 0 and newc >= 0):
				antinode = self.map[newr][newc]
				if(recurse and antinode.freq):
					pass
				elif(not antinode.is_an):
					antinode.is_an = True
					self.antinodes += 1
				if(recurse):
					self.map_antinode([newr, newc], dist, factor, recurse)
		except Exception as _:
			pass

class Cell:
	def __init__(self, freq):
		self.freq = freq
		self.is_an = False

def part_one(data):
	map = Map(data)
	map.prep_antinodes(False)
	map.print()
	return map.antinodes

def part_two(data):
	map = Map(data)
	for freq in map.freqs:
		map.antinodes += len(map.freqs[freq])
	map.prep_antinodes(True)
	map.print()
	return map.antinodes

if __name__ == "__main__":
	print(part_one(DATA))
	print(part_two(DATA))